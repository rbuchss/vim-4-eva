commit e832bbe067c6831de895ed7ed64ac568a38cd6c7
Author: rbuchss <rbuchss@gmail.com>
Date:   Sat Oct 18 22:23:17 2025 -0400

    wip move to lz.n

diff --git a/.gitmodules b/.gitmodules
index b06aa98..686f417 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -112,3 +112,6 @@
 [submodule "vim/pack/nvim/opt/mason-nvim-dap.nvim"]
 	path = vim/pack/nvim/opt/mason-nvim-dap.nvim
 	url = ../../jay-babu/mason-nvim-dap.nvim.git
+[submodule "vim/pack/nvim/opt/lz.n"]
+	path = vim/pack/nvim/opt/lz.n
+	url = ../../lumen-oss/lz.n.git
diff --git a/home/.config/nvim/init.lua b/home/.config/nvim/init.lua
index d71f3b5..21bb7c7 100644
--- a/home/.config/nvim/init.lua
+++ b/home/.config/nvim/init.lua
@@ -14,3 +14,5 @@ require('vim_4_eva.pack').setup({
 
 require('vim_4_eva.plugin').setup({})
 require('vim_4_eva.ftplugin').setup({})
+
+require('vim_4_eva.pack').lazy.load()
diff --git a/vim/lua/vim_4_eva/pack/init.lua b/vim/lua/vim_4_eva/pack/init.lua
index 93b13df..888d5bd 100644
--- a/vim/lua/vim_4_eva/pack/init.lua
+++ b/vim/lua/vim_4_eva/pack/init.lua
@@ -1,26 +1,27 @@
 local M = {
   packages = {
     available = {
+      'lz.n',
       -- Add neovim specific plugins here from vim/pack/{label}/opt.
       -- This is necessary to avoid autolaoding these in standard vim.
       -- Which would happen in the vim/pack/{label}/start directory.
       'plenary.nvim',
       'telescope.nvim',
-      'nvim-treesitter',
+      -- 'nvim-treesitter',
       'lazydev.nvim',
       'mason.nvim',
       'mason-lspconfig.nvim',
       'mason-tool-installer.nvim',
       'nvim-lspconfig',
       'fidget.nvim',
-      'blink.cmp',
+      -- 'blink.cmp',
       'lush.nvim',
       'zombat.nvim',
       'windsurf.nvim',
-      'gitsigns.nvim',
-      'statuscol.nvim',
-      'which-key.nvim',
-      'todo-comments.nvim',
+      -- 'gitsigns.nvim',
+      -- 'statuscol.nvim',
+      -- 'which-key.nvim',
+      -- 'todo-comments.nvim',
       'nvim-dap',
       'nvim-nio',
       'nvim-dap-ui',
@@ -28,6 +29,9 @@ local M = {
     },
     enabled = {},
   },
+  lazy = {
+    packages = {},
+  },
 }
 
 function M.setup(config)
@@ -48,4 +52,20 @@ function M.add_packages(packages)
   end
 end
 
+-- TODO: make this use a table as an input
+function M.lazy.register(package, config)
+  local merged_config = vim.tbl_deep_extend(
+    'force',
+    M.lazy.packages[package] or {},
+    config
+  )
+
+  M.lazy.packages[package] = merged_config
+end
+
+function M.lazy.load()
+  local configs = vim.tbl_values(M.lazy.packages)
+  require('lz.n').load(configs)
+end
+
 return M
diff --git a/vim/lua/vim_4_eva/plugin/settings/blink.lua b/vim/lua/vim_4_eva/plugin/settings/blink.lua
index deae4b2..c46cbf8 100644
--- a/vim/lua/vim_4_eva/plugin/settings/blink.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/blink.lua
@@ -51,8 +51,17 @@ local source_icons = {
   fallback = 'ó°œš',
 }
 
-function M.setup(config)
-  require('blink.cmp').setup(M.config)
+function M.setup(_)
+  require('vim_4_eva.pack').lazy.register(
+    'blink.cmp',
+    {
+      'blink.cmp',
+      event = 'VimEnter',
+      after = function()
+        require('blink.cmp').setup(M.config)
+      end,
+    }
+  )
 end
 
 function M.sources()
diff --git a/vim/lua/vim_4_eva/plugin/settings/gitsigns.lua b/vim/lua/vim_4_eva/plugin/settings/gitsigns.lua
index 2f08ae2..2792f6c 100644
--- a/vim/lua/vim_4_eva/plugin/settings/gitsigns.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/gitsigns.lua
@@ -1,58 +1,66 @@
 local M = {}
 
-function M.setup(config)
-  require('gitsigns').setup({
-    on_attach = function(bufnr)
-      local gitsigns = require 'gitsigns'
+function M.setup(_)
+  require('vim_4_eva.pack').lazy.register(
+    'gitsigns.nvim',
+    {
+      'gitsigns.nvim',
+      after = function()
+        require('gitsigns').setup({
+          on_attach = function(bufnr)
+            local gitsigns = require 'gitsigns'
 
-      local function map(mode, l, r, opts)
-        opts = opts or {}
-        opts.buffer = bufnr
-        vim.keymap.set(mode, l, r, opts)
-      end
+            local function map(mode, l, r, opts)
+              opts = opts or {}
+              opts.buffer = bufnr
+              vim.keymap.set(mode, l, r, opts)
+            end
 
-      -- Navigation
-      map('n', ']c', function()
-        if vim.wo.diff then
-          vim.cmd.normal { ']c', bang = true }
-        else
-          gitsigns.nav_hunk 'next'
-        end
-      end, { desc = 'Jump to next git [c]hange' })
+            -- Navigation
+            map('n', ']c', function()
+              if vim.wo.diff then
+                vim.cmd.normal { ']c', bang = true }
+              else
+                gitsigns.nav_hunk 'next'
+              end
+            end, { desc = 'Jump to next git [c]hange' })
 
-      map('n', '[c', function()
-        if vim.wo.diff then
-          vim.cmd.normal { '[c', bang = true }
-        else
-          gitsigns.nav_hunk 'prev'
-        end
-      end, { desc = 'Jump to previous git [c]hange' })
+            map('n', '[c', function()
+              if vim.wo.diff then
+                vim.cmd.normal { '[c', bang = true }
+              else
+                gitsigns.nav_hunk 'prev'
+              end
+            end, { desc = 'Jump to previous git [c]hange' })
 
-      -- Actions
-      -- visual mode
-      map('v', '<leader>hs', function()
-        gitsigns.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }
-      end, { desc = 'git [s]tage hunk' })
-      map('v', '<leader>hr', function()
-        gitsigns.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }
-      end, { desc = 'git [r]eset hunk' })
-      -- normal mode
-      map('n', '<leader>hs', gitsigns.stage_hunk, { desc = 'git [s]tage hunk' })
-      map('n', '<leader>hr', gitsigns.reset_hunk, { desc = 'git [r]eset hunk' })
-      map('n', '<leader>hS', gitsigns.stage_buffer, { desc = 'git [S]tage buffer' })
-      map('n', '<leader>hu', gitsigns.stage_hunk, { desc = 'git [u]ndo stage hunk' })
-      map('n', '<leader>hR', gitsigns.reset_buffer, { desc = 'git [R]eset buffer' })
-      map('n', '<leader>hp', gitsigns.preview_hunk, { desc = 'git [p]review hunk' })
-      map('n', '<leader>hb', gitsigns.blame_line, { desc = 'git [b]lame line' })
-      map('n', '<leader>hd', gitsigns.diffthis, { desc = 'git [d]iff against index' })
-      map('n', '<leader>hD', function()
-        gitsigns.diffthis '@'
-      end, { desc = 'git [D]iff against last commit' })
-      -- Toggles
-      map('n', '<leader>tb', gitsigns.toggle_current_line_blame, { desc = '[T]oggle git show [b]lame line' })
-      map('n', '<leader>tD', gitsigns.preview_hunk_inline, { desc = '[T]oggle git show [D]eleted' })
-    end,
-  })
+            -- Actions
+            -- visual mode
+            map('v', '<leader>hs', function()
+              gitsigns.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }
+            end, { desc = 'git [s]tage hunk' })
+            map('v', '<leader>hr', function()
+              gitsigns.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }
+            end, { desc = 'git [r]eset hunk' })
+            -- normal mode
+            map('n', '<leader>hs', gitsigns.stage_hunk, { desc = 'git [s]tage hunk' })
+            map('n', '<leader>hr', gitsigns.reset_hunk, { desc = 'git [r]eset hunk' })
+            map('n', '<leader>hS', gitsigns.stage_buffer, { desc = 'git [S]tage buffer' })
+            map('n', '<leader>hu', gitsigns.stage_hunk, { desc = 'git [u]ndo stage hunk' })
+            map('n', '<leader>hR', gitsigns.reset_buffer, { desc = 'git [R]eset buffer' })
+            map('n', '<leader>hp', gitsigns.preview_hunk, { desc = 'git [p]review hunk' })
+            map('n', '<leader>hb', gitsigns.blame_line, { desc = 'git [b]lame line' })
+            map('n', '<leader>hd', gitsigns.diffthis, { desc = 'git [d]iff against index' })
+            map('n', '<leader>hD', function()
+              gitsigns.diffthis '@'
+            end, { desc = 'git [D]iff against last commit' })
+            -- Toggles
+            map('n', '<leader>tb', gitsigns.toggle_current_line_blame, { desc = '[T]oggle git show [b]lame line' })
+            map('n', '<leader>tD', gitsigns.preview_hunk_inline, { desc = '[T]oggle git show [D]eleted' })
+          end,
+        })
+      end,
+    }
+  )
 end
 
 return M
diff --git a/vim/lua/vim_4_eva/plugin/settings/lsp.lua b/vim/lua/vim_4_eva/plugin/settings/lsp.lua
index 5885f74..3a1e535 100644
--- a/vim/lua/vim_4_eva/plugin/settings/lsp.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/lsp.lua
@@ -1,6 +1,11 @@
 local M = {}
 
 function M.setup(config)
+  -- require('vim_4_eva.pack').lazy.register(
+  --   'mason',
+  --   {
+  --     'mason',
+  --   }
   require('mason').setup({})
   require('fidget').setup({})
 
diff --git a/vim/lua/vim_4_eva/plugin/settings/statuscol.lua b/vim/lua/vim_4_eva/plugin/settings/statuscol.lua
index abbbb04..551bb96 100644
--- a/vim/lua/vim_4_eva/plugin/settings/statuscol.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/statuscol.lua
@@ -1,85 +1,94 @@
 local M = {}
 
-function M.setup(config)
-  local builtin = require("statuscol.builtin")
-  require('statuscol').setup({
-    setopt = true,         -- Whether to set the 'statuscolumn' option, may be set to false for those who
-    -- want to use the click handlers in their own 'statuscolumn': _G.Sc[SFL]a().
-    -- Although I recommend just using the segments field below to build your
-    -- statuscolumn to benefit from the performance optimizations in this plugin.
-    -- builtin.lnumfunc number string options
-    thousands = false,     -- or line number thousands separator string ("." / ",")
-    relculright = false,   -- whether to right-align the cursor line number with 'relativenumber' set
-    -- Builtin 'statuscolumn' options
-    -- Lua table with 'filetype' values for which 'statuscolumn' will be unset
-    ft_ignore = { 'netrw', 'nerdtree' },
-    -- Lua table with 'buftype' values for which 'statuscolumn' will be unset
-    bt_ignore = { 'help', 'quickfix', 'nofile', 'nowrite', 'terminal', 'prompt' },
-    segments = {
-      {
-        text = { builtin.foldfunc },
-        click = "v:lua.ScFa",
-      },
-      -- Diagnostics signs config.
-      -- Uses ale namespace to allow ale signs to render here as well:
-      --
-      -- See:
-      --  https://github.com/dense-analysis/ale/blob/c88bddfa83dbb96c2f57426794ed98a0e181ea7e/lua/ale/diagnostics.lua#L72
-      --
-      {
-        sign = {
-          namespace = { 'diagnostic/signs', 'ale' },
-          maxwidth = 1,
-          auto = true,
-        },
-        click = "v:lua.ScSa"
-      },
-      {
-        sign = {
-          name = { 'Signature_*', },
-          maxwidth = 1,
-          auto = true,
-        },
-      },
-      {
-        sign = {
-          name = { 'Dap*', },
-          maxwidth = 1,
-          auto = true,
-        },
-        click = "v:lua.ScSa",
-      },
-      {
-        text = { builtin.lnumfunc },
-        click = "v:lua.ScLa",
-      },
-      {
-        sign = {
-          namespace = { 'gitsigns' },
-          maxwidth = 1,
-          colwidth = 1,
-        },
-        click = "v:lua.ScSa",
-      },
-      -- Visual separator.
-      {
-        text = { ' ' },
-      },
-    },
-    clickmod = "c",         -- modifier used for certain actions in the builtin clickhandlers:
-    -- "a" for Alt, "c" for Ctrl and "m" for Meta.
-    clickhandlers = {       -- builtin click handlers, keys are pattern matched
-      Lnum                    = builtin.lnum_click,
-      FoldClose               = builtin.foldclose_click,
-      FoldOpen                = builtin.foldopen_click,
-      FoldOther               = builtin.foldother_click,
-      DapBreakpointRejected   = builtin.toggle_breakpoint,
-      DapBreakpoint           = builtin.toggle_breakpoint,
-      DapBreakpointCondition  = builtin.toggle_breakpoint,
-      ["diagnostic/signs"]    = builtin.diagnostic_click,
-      gitsigns                = builtin.gitsigns_click,
-    },
-  })
+function M.setup(_)
+  require('vim_4_eva.pack').lazy.register(
+    'statuscol.nvim',
+    {
+      'statuscol.nvim',
+      -- event = 'VimEnter',
+      after = function()
+        local builtin = require('statuscol.builtin')
+        require('statuscol').setup({
+          setopt = true,         -- Whether to set the 'statuscolumn' option, may be set to false for those who
+          -- want to use the click handlers in their own 'statuscolumn': _G.Sc[SFL]a().
+          -- Although I recommend just using the segments field below to build your
+          -- statuscolumn to benefit from the performance optimizations in this plugin.
+          -- builtin.lnumfunc number string options
+          thousands = false,     -- or line number thousands separator string ("." / ",")
+          relculright = false,   -- whether to right-align the cursor line number with 'relativenumber' set
+          -- Builtin 'statuscolumn' options
+          -- Lua table with 'filetype' values for which 'statuscolumn' will be unset
+          ft_ignore = { 'netrw', 'nerdtree' },
+          -- Lua table with 'buftype' values for which 'statuscolumn' will be unset
+          bt_ignore = { 'help', 'quickfix', 'nofile', 'nowrite', 'terminal', 'prompt' },
+          segments = {
+            {
+              text = { builtin.foldfunc },
+              click = 'v:lua.ScFa',
+            },
+            -- Diagnostics signs config.
+            -- Uses ale namespace to allow ale signs to render here as well:
+            --
+            -- See:
+            --  https://github.com/dense-analysis/ale/blob/c88bddfa83dbb96c2f57426794ed98a0e181ea7e/lua/ale/diagnostics.lua#L72
+            --
+            {
+              sign = {
+                namespace = { 'diagnostic/signs', 'ale' },
+                maxwidth = 1,
+                auto = true,
+              },
+              click = 'v:lua.ScSa'
+            },
+            {
+              sign = {
+                name = { 'Signature_*', },
+                maxwidth = 1,
+                auto = true,
+              },
+            },
+            {
+              sign = {
+                name = { 'Dap*', },
+                maxwidth = 1,
+                auto = true,
+              },
+              click = 'v:lua.ScSa',
+            },
+            {
+              text = { builtin.lnumfunc },
+              click = 'v:lua.ScLa',
+            },
+            {
+              sign = {
+                namespace = { 'gitsigns' },
+                maxwidth = 1,
+                colwidth = 1,
+              },
+              click = 'v:lua.ScSa',
+            },
+            -- Visual separator.
+            {
+              text = { ' ' },
+            },
+          },
+          clickmod = 'c',         -- modifier used for certain actions in the builtin clickhandlers:
+          -- "a" for Alt, "c" for Ctrl and "m" for Meta.
+          clickhandlers = {       -- builtin click handlers, keys are pattern matched
+            Lnum                    = builtin.lnum_click,
+            FoldClose               = builtin.foldclose_click,
+            FoldOpen                = builtin.foldopen_click,
+            FoldOther               = builtin.foldother_click,
+            DapBreakpointRejected   = builtin.toggle_breakpoint,
+            DapBreakpoint           = builtin.toggle_breakpoint,
+            DapBreakpointCondition  = builtin.toggle_breakpoint,
+            ['diagnostic/signs']    = builtin.diagnostic_click,
+            gitsigns                = builtin.gitsigns_click,
+          },
+        })
+      end,
+    }
+  )
 end
 
 return M
diff --git a/vim/lua/vim_4_eva/plugin/settings/todo-comments.lua b/vim/lua/vim_4_eva/plugin/settings/todo-comments.lua
index 776a91d..c1c7402 100644
--- a/vim/lua/vim_4_eva/plugin/settings/todo-comments.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/todo-comments.lua
@@ -1,15 +1,24 @@
 local M = {}
 
-function M.setup(config)
-  require('todo-comments').setup({})
+function M.setup(_)
+  require('vim_4_eva.pack').lazy.register(
+    'todo-comments.nvim',
+    {
+      'todo-comments.nvim',
+      event = 'VimEnter',
+      after = function()
+        require('todo-comments').setup({})
 
-  vim.keymap.set('n', ']t', function()
-    require('todo-comments').jump_next()
-  end, { desc = 'Next todo comment' })
+        vim.keymap.set('n', ']t', function()
+          require('todo-comments').jump_next()
+        end, { desc = 'Next todo comment' })
 
-  vim.keymap.set('n', '[t', function()
-    require('todo-comments').jump_prev()
-  end, { desc = 'Previous todo comment' })
+        vim.keymap.set('n', '[t', function()
+          require('todo-comments').jump_prev()
+        end, { desc = 'Previous todo comment' })
+      end,
+    }
+  )
 end
 
 return M
diff --git a/vim/lua/vim_4_eva/plugin/settings/treesitter.lua b/vim/lua/vim_4_eva/plugin/settings/treesitter.lua
index f56f2cb..a9ee6d3 100644
--- a/vim/lua/vim_4_eva/plugin/settings/treesitter.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/treesitter.lua
@@ -1,49 +1,57 @@
 local M = {}
 
-function M.setup(config)
-  -- Make sure that all installed parsers are updated to the latest version via :TSUpdate
-  -- TODO: make this not happen every load possibly with some debouncing.
-  --
-  -- For now , just disabling and relying on manually running this.
-  --
-  -- Note that if enabled with auto_install=true this errors with using the same tmp dirs.
-  --
-  -- vim.cmd.TSUpdate()
-
-  require('nvim-treesitter.configs').setup({
-    -- A list of parser names, or "all" (the listed parsers MUST always be installed)
-    ensure_installed = {
-      "bash",
-      -- "c",
-      "diff",
-      "lua",
-      "vim",
-      "vimdoc",
-      -- "query",
-      "markdown",
-      "markdown_inline",
-    },
-
-    -- Install parsers asynchronously (only applied to `ensure_installed`)
-    sync_install = false,
-
-    -- Automatically install missing parsers when entering buffer
-    -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
-    auto_install = false,
-
-    -- List of parsers to ignore installing (or "all")
-    ignore_install = {},
-
-    highlight = {
-      enable = true,
-
-      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
-      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
-      -- Using this option may slow down your editor, and you may see some duplicate highlights.
-      -- Instead of true it can also be a list of languages
-      additional_vim_regex_highlighting = false,
-    },
-  })
+function M.setup(_)
+  require('vim_4_eva.pack').lazy.register(
+    'nvim-treesitter',
+    {
+      'nvim-treesitter',
+      after = function()
+        -- Make sure that all installed parsers are updated to the latest version via :TSUpdate
+        -- TODO: make this not happen every load possibly with some debouncing.
+        --
+        -- For now , just disabling and relying on manually running this.
+        --
+        -- Note that if enabled with auto_install=true this errors with using the same tmp dirs.
+        --
+        -- vim.cmd.TSUpdate()
+
+        require('nvim-treesitter.configs').setup({
+          -- A list of parser names, or "all" (the listed parsers MUST always be installed)
+          ensure_installed = {
+            "bash",
+            -- "c",
+            "diff",
+            "lua",
+            "vim",
+            "vimdoc",
+            -- "query",
+            "markdown",
+            "markdown_inline",
+          },
+
+          -- Install parsers asynchronously (only applied to `ensure_installed`)
+          sync_install = false,
+
+          -- Automatically install missing parsers when entering buffer
+          -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
+          auto_install = false,
+
+          -- List of parsers to ignore installing (or "all")
+          ignore_install = {},
+
+          highlight = {
+            enable = true,
+
+            -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
+            -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
+            -- Using this option may slow down your editor, and you may see some duplicate highlights.
+            -- Instead of true it can also be a list of languages
+            additional_vim_regex_highlighting = false,
+          },
+        })
+      end,
+    }
+  )
 end
 
 return M
diff --git a/vim/lua/vim_4_eva/plugin/settings/which-key.lua b/vim/lua/vim_4_eva/plugin/settings/which-key.lua
index 0001670..b794cbe 100644
--- a/vim/lua/vim_4_eva/plugin/settings/which-key.lua
+++ b/vim/lua/vim_4_eva/plugin/settings/which-key.lua
@@ -1,11 +1,20 @@
 local M = {}
 
-function M.setup(config)
-  require('which-key').setup({})
+function M.setup(_)
+  require('vim_4_eva.pack').lazy.register(
+    'which-key.nvim',
+    {
+      'which-key.nvim',
+      event = 'VimEnter',
+      after = function()
+        require('which-key').setup({})
 
-  vim.keymap.set('n', '<leader>?', function()
-    require('which-key').show({ global = false })
-  end, { desc = "Buffer Local Keymaps (which-key)" })
+        vim.keymap.set('n', '<leader>?', function()
+          require('which-key').show({ global = false })
+        end, { desc = "Buffer Local Keymaps (which-key)" })
+      end,
+    }
+  )
 end
 
 return M
